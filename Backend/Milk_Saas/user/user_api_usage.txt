# User App API Usage Guide

## Base URL
All API endpoints are prefixed with: `/api/`

## Authentication
- JWT token-based authentication
- Format: `Authorization: Bearer <your_jwt_token>`

## 1. Registration API

### Register New User
POST /api/register/

Request Body:
{
    "username": "john_doe",
    "phone_number": "+919876543210",
    "email": "john@example.com",
    "password": "secure_password123"
}

Success Response (200 OK):
{
    "token": "<JWT_ACCESS_TOKEN>",
    "message": "Registration successful"
}

Error Response (400 Bad Request):
{
    "username": ["This username is already taken"],
    "phone_number": ["Invalid phone number format"]
}

## 2. Login API

### User Login
POST /api/login/

Request Body:
{
    "login_field": "john_doe",  // username or phone number
    "password": "secure_password123"
}

Success Response (200 OK):
{
    "token": "<JWT_ACCESS_TOKEN>",
    "message": "Login successful",
    "user": {
        "username": "john_doe",
        "phone_number": "+919876543210",
        "email": "john@example.com"
    }
}

Error Response (401 Unauthorized):
{
    "error": "Invalid credentials"
}

Rate Limit Response (429 Too Many Requests):
{
    "error": "Too many failed attempts. Please try again later."
}

## 3. Forgot Password API

### Request Password Reset
POST /api/forgot-password/

Request Body:
{
    "email": "john@example.com"
}

Success Response (200 OK):
{
    "message": "Password reset OTP has been sent to your email.",
    "email": "john@example.com"
}

Error Response (404 Not Found):
{
    "error": "No user found with this email address."
}

## 4. Reset Password API

### Reset Password with OTP
POST /api/reset-password/

Request Body:
{
    "email": "john@example.com",
    "otp": "123456",
    "new_password": "new_secure_password123"
}

Success Response (200 OK):
{
    "message": "Password has been reset successfully."
}

Error Response (400 Bad Request):
{
    "error": "Invalid or expired OTP."
}

## Common Features

### Rate Limiting
- Registration: 20 requests per minute
- Login: 20 requests per minute
- Failed login lockout: 5 attempts within 5 minutes

### Error Responses
Standard error format:
{
    "error": "Error message",
    "detail": "Detailed error info" // Only in DEBUG mode
}

### Authentication Headers
For protected endpoints:
Authorization: Bearer <your_jwt_token>

### Response Codes
- 200: Success
- 201: Created
- 400: Bad Request
- 401: Unauthorized
- 403: Forbidden
- 429: Too Many Requests
- 500: Server Error

### Validation Rules
- Username: Required, unique
- Phone Number: Required, unique, format: +919876543210
- Email: Optional, valid email format
- Password: Required, minimum security requirements

### Security Notes
1. Token Expiry: 30 days
2. Failed Login Lockout: 5 minutes
3. Rate Limiting: Per-endpoint basis
4. Phone Number Format: International format with country code
5. OTP Validity: 10 minutes
6. OTP Format: 6-digit numeric code

### Example Usage

1. Registration:
curl -X POST http://your-domain/api/register/ \
-H "Content-Type: application/json" \
-d '{
    "username": "john_doe",
    "phone_number": "+919876543210",
    "email": "john@example.com",
    "password": "secure_password123"
}'

2. Login:
curl -X POST http://your-domain/api/login/ \
-H "Content-Type: application/json" \
-d '{
    "login_field": "john_doe",
    "password": "secure_password123"
}'

3. Using JWT Token:
curl -H "Authorization: Bearer <your_jwt_token>" \
http://your-domain/api/protected-endpoint/