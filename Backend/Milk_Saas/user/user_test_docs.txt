# User App Test Documentation

## Overview
This document provides detailed documentation for the test cases in the User app. The tests are organized into three main classes:
1. UserModelTests - Testing user model functionality
2. UserAPITests - Testing authentication and user management APIs
3. UserAuthenticationTests - Testing JWT token authentication

## Test Setup
All test classes use Django's TestCase framework and include appropriate setUp methods that create:
- Test user data
- Test user instances
- JWT tokens where needed
- API client configuration

## 1. UserModelTests
Tests the basic functionality of the User model.

### Setup
- Creates test user with username, phone number, email, and password
- Sets up basic test data with realistic values

### Test Methods

#### test_create_user
- Purpose: Tests basic user creation
- Verifies:
  - Username is set correctly
  - Phone number is set correctly
  - Email is set correctly
  - Password is hashed correctly
  - Default permissions are set correctly

#### test_create_superuser
- Purpose: Tests superuser creation
- Verifies:
  - Superuser has staff status
  - Superuser has superuser status
  - Superuser is active

#### test_user_str_method
- Purpose: Tests string representation of User model
- Verifies that str(user) returns the username
- Expected output: username of the user

#### test_soft_delete
- Purpose: Tests soft deletion functionality
- Verifies:
  - User is marked as inactive
  - User not visible in normal queries
  - User still exists in database (accessible via all_objects)

#### test_reset_password_token_creation
- Purpose: Tests OTP generation for password reset
- Verifies:
  - Token is 6 digits
  - Token creation timestamp is set
  - Token is stored in user model

#### test_reset_password_token_verification
- Purpose: Tests OTP verification logic
- Verifies:
  - Valid token is accepted
  - Invalid token is rejected
  - Expired token is rejected
  - Token expiry time is enforced (10 minutes)

## 2. UserAPITests
Tests the REST API endpoints for user management.

### Setup
- Creates API client
- Sets up test URLs
- Prepares test user data
- Clears cache before each test

### Test Methods

#### test_user_registration
- Purpose: Tests user registration endpoint
- Verifies:
  - Can create new user
  - Returns JWT token
  - Returns success message
  - User is created in database

#### test_duplicate_username_registration
- Purpose: Tests username uniqueness
- Verifies:
  - Cannot create user with existing username
  - Returns appropriate error message

#### test_duplicate_phone_registration
- Purpose: Tests phone number uniqueness
- Verifies:
  - Cannot create user with existing phone number
  - Returns appropriate error message

#### test_login_with_username
- Purpose: Tests username-based login
- Verifies:
  - Can login with username
  - Returns JWT token
  - Returns user data
  - Returns success message

#### test_login_with_phone
- Purpose: Tests phone number-based login
- Verifies:
  - Can login with phone number
  - Returns JWT token
  - Returns user data
  - Returns success message

#### test_login_with_wrong_password
- Purpose: Tests login failure
- Verifies:
  - Cannot login with wrong password
  - Returns appropriate error message

#### test_login_attempt_limit
- Purpose: Tests brute force protection
- Verifies:
  - Blocks after 5 failed attempts
  - Returns rate limit error
  - Cache-based attempt counting works

#### test_registration_with_invalid_phone
- Purpose: Tests phone number validation
- Verifies:
  - Cannot register with invalid phone format
  - Returns validation error message

#### test_registration_without_required_fields
- Purpose: Tests required field validation
- Verifies:
  - Cannot register without required fields
  - Returns appropriate error messages

#### test_rate_limiting
- Purpose: Tests API rate limiting
- Verifies:
  - Limits requests to 20 per minute
  - Returns rate limit error when exceeded

#### test_forgot_password
- Purpose: Tests password reset request
- Verifies:
  - Can request password reset
  - Returns success message
  - Returns masked email

#### test_forgot_password_invalid_email
- Purpose: Tests invalid email handling in forgot password
- Verifies:
  - Cannot reset password for non-existent email
  - Returns validation error (400 Bad Request)
  - Response includes email field error message

#### test_reset_password
- Purpose: Tests password reset completion
- Verifies:
  - Can reset password with valid OTP
  - Returns success message
  - Can login with new password
  - Old password no longer works

## 3. UserAuthenticationTests
Tests the JWT token authentication system.

### Setup
- Creates test user
- Generates JWT token
- Configures API client

### Test Methods

#### test_authentication_with_valid_token
- Purpose: Tests valid token authentication
- Verifies:
  - Can access protected endpoints with valid token
  - Token authorization header works correctly

#### test_authentication_without_token
- Purpose: Tests unauthorized access
- Verifies:
  - Cannot access protected endpoints without token
  - Returns unauthorized error

#### test_authentication_with_invalid_token
- Purpose: Tests invalid token handling
- Verifies:
  - Cannot access protected endpoints with invalid token
  - Returns unauthorized error

#### test_token_expiry
- Purpose: Tests token expiration
- Verifies:
  - Expired tokens are rejected
  - Returns unauthorized error for expired tokens

## Best Practices Demonstrated
1. Comprehensive Setup: Each test class has thorough setUp method
2. Isolation: Tests are independent and don't affect each other
3. Coverage: Tests cover model, APIs, and authentication
4. Security: Tests verify authentication and rate limiting
5. Data Validation: Tests verify input validation
6. Error Handling: Tests verify proper error responses
7. Cache Usage: Tests verify cache-based features
8. Token Management: Tests verify JWT token functionality

## Running the Tests
To run all user app tests:
```bash
python manage.py test user
```

To run specific test class:
```bash
python manage.py test user.tests.UserModelTests
python manage.py test user.tests.UserAPITests
python manage.py test user.tests.UserAuthenticationTests
```

To run specific test method:
```bash
python manage.py test user.tests.UserAPITests.test_user_registration
``` 