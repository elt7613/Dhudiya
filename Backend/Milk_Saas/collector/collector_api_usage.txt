# Collector App API Usage Guide

## Base URL
All API endpoints are prefixed with: `/api/collector/`

## Authentication
- All requests require a JWT token in the Authorization header
- Format: `Authorization: Bearer <your_jwt_token>`
- All endpoints are user-specific (users can only access their own data)

## 1. Customer APIs

### List Customers
GET /api/collector/customers/
- Query Parameters:
  - search: Filter by name or phone
  - page: Page number for pagination
  - page_size: Number of items per page (optional)
- Response:
{
    "count": 100,
    "next": "http://api/collector/customers/?page=2",
    "previous": null,
    "results": [
        {
            "id": 1,
            "name": "John Doe",
            "phone": "1234567890",
            "is_active": true
        }
    ]
}

### Create Customer
POST /api/collector/customers/
- Request Body:
{
    "name": "John Doe",
    "phone": "1234567890"
}
- Response: Created customer object

### Update Customer
PUT/PATCH /api/collector/customers/{id}/
- Request Body:
{
    "name": "John Doe Updated",
    "phone": "0987654321"
}
- Response: Updated customer object

### Delete Customer
DELETE /api/collector/customers/{id}/
- Response:
{
    "message": "Customer deleted successfully"
}

## 2. Collection APIs

### List Collections
GET /api/collector/collections/
- Query Parameters:
  - date_from: Filter by start date (YYYY-MM-DD)
  - date_to: Filter by end date (YYYY-MM-DD)
  - collection_time: 'morning' or 'evening'
  - milk_type: 'cow' or 'buffalo'
  - customer: Customer ID
  - measured: 'liters' or 'kg'
  - min_rate/max_rate: Rate range
  - min_amount/max_amount: Amount range
  - search: Search by customer name
  - ordering: Sort by field (e.g., -collection_date)
  - min_fat/max_fat: Fat percentage range
  - min_snf/max_snf: SNF percentage range
  - page: Page number
  - page_size: Items per page
- Response:
{
    "count": 100,
    "next": "http://api/collector/collections/?page=2",
    "previous": null,
    "results": [
        {
            "id": 1,
            "collection_time": "morning",
            "milk_type": "cow",
            "customer_name": "John Doe",
            "collection_date": "2024-02-20",
            "measured": "liters",
            "liters": "10.50",
            "kg": "10.80",
            "fat_percentage": "3.5",
            "fat_kg": "0.378",
            "clr": "28.5",
            "snf_percentage": "8.5",
            "snf_kg": "0.918",
            "fat_rate": "45.00",
            "snf_rate": "45.00",
            "rate": "45.00",
            "amount": "486.00"
        }
    ]
}

### Create Collection
POST /api/collector/collections/
- Request Body:
{
    "collection_time": "morning",
    "milk_type": "cow",
    "customer": 1,
    "collection_date": "2024-02-20",
    "measured": "liters",
    "liters": "10.50",
    "kg": "10.80",
    "fat_percentage": "3.5",
    "fat_kg": "0.378",
    "clr": "28.5",
    "snf_percentage": "8.5",
    "snf_kg": "0.918",
    "fat_rate": "45.00",
    "snf_rate": "45.00",
    "rate": "45.00",
    "amount": "486.00"
}
- Response: Created collection object

### Update Collection
PUT/PATCH /api/collector/collections/{id}/
- Request Body: Same as create
- Response: Updated collection object

### Delete Collection
DELETE /api/collector/collections/{id}/
- Response:
{
    "message": "Collection deleted successfully"
}

### Generate Report
GET /api/collector/collections/generate_report/
- Query Parameters:
  - customer: Customer ID (optional)
  - date_from: Start date (YYYY-MM-DD)
  - date_to: End date (YYYY-MM-DD)
  - report_type: Type of report to generate
    - "purchase_report": General purchase report
    - "milk_purchase_summary": Summary report
    - "customer_milk_bill": Customer-specific bill
- Response: PDF file containing the requested report

### Generate Customer Bills
GET /api/collector/collections/generate_customer_bill/
- Query Parameters:
  - start_date: Start date (YYYY-MM-DD)
  - end_date: End date (YYYY-MM-DD)
  - customer_ids: Comma-separated list of customer IDs (e.g., "1,2,3")
- Response: PDF file containing milk bills for specified customers
- Error Responses:
  - 400 Bad Request:
    ```json
    {
        "error": "start_date, end_date, and customer_ids are required query parameters"
    }
    ```
    or
    ```json
    {
        "error": "Invalid date format (use YYYY-MM-DD) or customer IDs format"
    }
    ```
  - 403 Forbidden:
    ```json
    {
        "error": "Cannot generate report for customers that do not belong to you",
        "invalid_customer_ids": [123, 456]
    }
    ```
  - 404 Not Found:
    ```json
    {
        "error": "No collections found for the specified customers and date range"
    }
    ```

## 3. Rate Step APIs

### List Rate Steps
GET /api/collector/rate-steps/
- Query Parameters:
  - milk_type: 'cow' or 'buffalo'
  - rate_type: 'rate per kg'
  - min_rate/max_rate: Rate range
  - min_fat/max_fat: Fat range
  - min_snf/max_snf: SNF range
  - ordering: Sort by field (-created_at, rate, fat_from, fat_to)
  - page: Page number
  - page_size: Items per page
- Response:
{
    "count": 10,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 1,
            "rate_type": "rate per kg",
            "milk_type": "cow",
            "fat_from": "3.0",
            "fat_to": "4.0",
            "fat_rate": "45.00",
            "snf_from": "8.0",
            "snf_to": "9.0",
            "snf_rate": "45.00",
            "is_active": true,
            "created_at": "2024-02-20T10:00:00Z",
            "updated_at": "2024-02-20T10:00:00Z"
        }
    ]
}

### Create Rate Step
POST /api/collector/rate-steps/
- Request Body:
{
    "rate_type": "rate per kg",
    "milk_type": "cow",
    "fat_from": 3.0,
    "fat_to": 4.0,
    "fat_rate": 45.00,
    "snf_from": 8.0,
    "snf_to": 9.0,
    "snf_rate": 45.00
}
- Response: Created rate step object

### Update Rate Step
PUT /api/collector/rate-steps/{id}/
- Request Body: Same as create
- Response: Updated rate step object

### Delete Rate Step
DELETE /api/collector/rate-steps/{id}/
- Response:
{
    "message": "Rate step deleted successfully"
}

## 4. Market Milk Price APIs

### List Market Prices
GET /api/collector/market-milk-prices/
- Query Parameters:
  - price: Filter by exact price
  - ordering: Sort by field (-created_at, price)
  - page: Page number
  - page_size: Items per page
- Response:
{
    "count": 10,
    "results": [
        {
            "id": 1,
            "price": "45.00",
            "is_active": true,
            "created_at": "2024-02-20T10:00:00Z",
            "updated_at": "2024-02-20T10:00:00Z"
        }
    ]
}

### Create Market Price
POST /api/collector/market-milk-prices/
- Request Body:
{
    "price": "45.00"
}
- Response: Created market price object

### Update Market Price
PUT /api/collector/market-milk-prices/{id}/
- Request Body: Same as create
- Response: Updated market price object

### Delete Market Price
DELETE /api/collector/market-milk-prices/{id}/
- Response:
{
    "message": "Market milk price deleted successfully"
}

## 5. Dairy Information APIs

### List Dairy Information
GET /api/collector/dairy-information/
- Query Parameters:
  - search: Filter by dairy name
  - ordering: Sort by field (-created_at, dairy_name, rate_type)
  - page: Page number
  - page_size: Items per page
- Response:
```json
{
    "count": 1,
    "results": [
        {
            "id": 1,
            "dairy_name": "Sample Dairy",
            "dairy_address": "123 Dairy Street",
            "rate_type": "fat_snf",
            "is_active": true,
            "created_at": "2024-02-20T10:00:00Z",
            "updated_at": "2024-02-20T10:00:00Z"
        }
    ]
}
```

### Create Dairy Information
POST /api/collector/dairy-information/
- Request Body:
```json
{
    "dairy_name": "Sample Dairy",
    "dairy_address": "123 Dairy Street",
    "rate_type": "fat_snf"
}
```
- Response: Created dairy information object

### Update Dairy Information
PUT/PATCH /api/collector/dairy-information/{id}/
- Request Body: Same as create
- Response: Updated dairy information object

### Delete Dairy Information
DELETE /api/collector/dairy-information/{id}/
- Response:
```json
{
    "message": "Dairy information deleted successfully"
}
```

## Report Generation Features

### 1. Purchase Report
- Part of the comprehensive report
- Shows daily collection totals
- Includes:
  - Date-wise breakdown
  - Weight and volume measurements
  - Fat and SNF calculations
  - Daily totals
  - Grand totals
  - Dairy name branding
  - Page numbers

### 2. Milk Purchase Summary
- Customer-wise summary
- Includes:
  - Customer details
  - Total collections
  - Average fat and SNF
  - Total amounts
  - Customer count
  - Grand totals

### 3. Customer Milk Bill
- Individual customer statements
- Features:
  - Daily collection details
  - Fat and SNF calculations
  - Rate calculations
  - Total amounts
  - Professional formatting
  - Dairy branding

### 4. Individual Customer Bills
- Generate bills for specific customers
- Features:
  - Multiple customer selection
  - Date range filtering
  - Customer ownership validation
  - Professional PDF formatting
  - Separate bills per customer

## Common Features

### Authentication
- All endpoints require valid JWT token
- Token must be included in Authorization header
- Format: `Authorization: Bearer <token>`
- Invalid/expired tokens return 401 Unauthorized

### Pagination
- All list endpoints support pagination
- Query parameters:
  - page: Page number
  - page_size: Items per page (optional)
- Default page size: 10 items

### Error Handling
- Validation errors: 400 Bad Request
- Authentication errors: 401 Unauthorized
- Permission errors: 403 Forbidden
- Not found errors: 404 Not Found
- Detailed error messages provided

### Data Validation
- All endpoints perform proper validation
- Required fields must be provided
- Field types and formats validated
- Business logic rules enforced
- Customer ownership validated

### Security
- User-specific data access
- Customer ownership validation
- Soft deletion support
- Proper error handling
- Secure PDF generation

### PDF Generation
- Professional formatting
- Proper pagination
- Header repetition
- Date range display
- Dairy branding
- Total calculations
- Error handling

### Soft Deletion
- DELETE operations perform soft deletion
- Records are marked as inactive but remain in database
- Inactive records are excluded from regular GET requests
- Can be restored through admin interface